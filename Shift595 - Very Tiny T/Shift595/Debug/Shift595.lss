
Shift595.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000918  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  00000918  000009ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800100  00800100  00000a4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a93  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000290  00000000  00000000  0000156b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b8  00000000  00000000  000017fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  00001db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000878  00000000  00000000  000020aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	8f c0       	rjmp	.+286    	; 0x124 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	11 e0       	ldi	r17, 0x01	; 1
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 e1       	ldi	r30, 0x18	; 24
  32:	f9 e0       	ldi	r31, 0x09	; 9
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 30       	cpi	r26, 0x00	; 0
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a2 30       	cpi	r26, 0x02	; 2
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	8e d0       	rcall	.+284    	; 0x16e <main>
  52:	60 c4       	rjmp	.+2240   	; 0x914 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z9HC595Initv>:
uint64_t line_pattern2[] = {0x7800000, 0x1FE00000, 0x3FF00000, 0x7FF80000, 0xFFFC0000,  0x1FFFE0000, 0x23FFFF1801, 0x3FFFFFFC03, 0x3FFFFFFE07, 0x3FFFFFFFFF };		
	
void HC595Init()
{
   //Make the Data(DS), Shift clock (SH_CP), Store Clock (ST_CP) lines output
   HC595_DDR |= ((1<<HC595_SH_CP_POS)|(1<<HC595_ST_CP_POS)|(1<<HC595_DS_POS)|(1<<HC595_OE));
  56:	87 b3       	in	r24, 0x17	; 23
  58:	8e 61       	ori	r24, 0x1E	; 30
  5a:	87 bb       	out	0x17, r24	; 23
   HC595_PORT |= (1<<HC595_PORT);
  5c:	38 b3       	in	r19, 0x18	; 24
  5e:	28 b3       	in	r18, 0x18	; 24
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	02 c0       	rjmp	.+4      	; 0x6a <_Z9HC595Initv+0x14>
  66:	88 0f       	add	r24, r24
  68:	99 1f       	adc	r25, r25
  6a:	3a 95       	dec	r19
  6c:	e2 f7       	brpl	.-8      	; 0x66 <_Z9HC595Initv+0x10>
  6e:	82 2b       	or	r24, r18
  70:	88 bb       	out	0x18, r24	; 24
  72:	08 95       	ret

00000074 <_Z10HC595Pulsev>:
#define HC595DataLow() (HC595_PORT&=(~(1<<HC595_DS_POS)))

void HC595Pulse()
{
   //Pulse the Shift Clock
   HC595_PORT|=(1<<HC595_SH_CP_POS);//HIGH
  74:	c4 9a       	sbi	0x18, 4	; 24

   HC595_PORT&=(~(1<<HC595_SH_CP_POS));//LOW
  76:	c4 98       	cbi	0x18, 4	; 24
  78:	08 95       	ret

0000007a <_Z10HC595Latchv>:
}


void HC595Latch()
{
   HC595_PORT|=(1<<HC595_ST_CP_POS);//HIGH
  7a:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	85 e0       	ldi	r24, 0x05	; 5
  7e:	8a 95       	dec	r24
  80:	f1 f7       	brne	.-4      	; 0x7e <_Z10HC595Latchv+0x4>
  82:	00 00       	nop
   _delay_us(1);

   HC595_PORT&=(~(1<<HC595_ST_CP_POS));//LOW
  84:	c3 98       	cbi	0x18, 3	; 24
  86:	85 e0       	ldi	r24, 0x05	; 5
  88:	8a 95       	dec	r24
  8a:	f1 f7       	brne	.-4      	; 0x88 <_Z10HC595Latchv+0xe>
  8c:	00 00       	nop
  8e:	08 95       	ret

00000090 <_Z10HC595Writeh>:
   _delay_us(1);
}


void HC595Write(uint8_t data)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	d8 2f       	mov	r29, r24
  96:	c8 e0       	ldi	r28, 0x08	; 8
   for(uint8_t i=0;i<8;i++)
   {

      if(data & 0b10000000)
  98:	dd 23       	and	r29, r29
  9a:	14 f4       	brge	.+4      	; 0xa0 <_Z10HC595Writeh+0x10>
      {
         HC595DataHigh();
  9c:	c1 9a       	sbi	0x18, 1	; 24
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <_Z10HC595Writeh+0x12>
      }
      else
      {
         HC595DataLow();
  a0:	c1 98       	cbi	0x18, 1	; 24
      }
      HC595Pulse();  //Pulse the Clock line
  a2:	e8 df       	rcall	.-48     	; 0x74 <_Z10HC595Pulsev>
      data=data<<1;  //Now bring next bit at MSB position
  a4:	dd 0f       	add	r29, r29
  a6:	c1 50       	subi	r28, 0x01	; 1
}


void HC595Write(uint8_t data)
{
   for(uint8_t i=0;i<8;i++)
  a8:	b9 f7       	brne	.-18     	; 0x98 <_Z10HC595Writeh+0x8>
         HC595DataLow();
      }
      HC595Pulse();  //Pulse the Clock line
      data=data<<1;  //Now bring next bit at MSB position
   }
}
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <_Z4Waitv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	82 e5       	ldi	r24, 0x52	; 82
  b4:	97 e0       	ldi	r25, 0x07	; 7
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <_Z4Waitv+0x6>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_Z4Waitv+0x10>
  c0:	00 00       	nop
  c2:	08 95       	ret

000000c4 <_Z5Wait2v>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	85 e3       	ldi	r24, 0x35	; 53
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <_Z5Wait2v+0x2>
  ca:	00 00       	nop
  cc:	08 95       	ret

000000ce <_Z11write5Byteshhhhh>:
}



void write5Bytes(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4)
{
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	c8 2f       	mov	r28, r24
  da:	d6 2f       	mov	r29, r22
  dc:	14 2f       	mov	r17, r20
  de:	f2 2e       	mov	r15, r18
  e0:	80 2f       	mov	r24, r16
	
	//uint8_t temp = byte2;
	//byte2 = (byte2 & 0x0F) | ((byte2>>1) & (0x70)) | ((byte2<<3) & (0x80));
	HC595Write(byte4);
  e2:	d6 df       	rcall	.-84     	; 0x90 <_Z10HC595Writeh>
	HC595Write(byte3);
  e4:	8f 2d       	mov	r24, r15
  e6:	d4 df       	rcall	.-88     	; 0x90 <_Z10HC595Writeh>
	HC595Write(byte2);
  e8:	81 2f       	mov	r24, r17
  ea:	d2 df       	rcall	.-92     	; 0x90 <_Z10HC595Writeh>
	HC595Write(byte1);
  ec:	8d 2f       	mov	r24, r29
  ee:	d0 df       	rcall	.-96     	; 0x90 <_Z10HC595Writeh>
	HC595Write(byte0);
  f0:	8c 2f       	mov	r24, r28
  f2:	ce df       	rcall	.-100    	; 0x90 <_Z10HC595Writeh>
	HC595Latch();
  f4:	c2 df       	rcall	.-124    	; 0x7a <_Z10HC595Latchv>
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	ff 90       	pop	r15
 100:	08 95       	ret

00000102 <_Z12EEPROM_writehh>:

void EEPROM_write(uint8_t uiAddress, uint8_t ucData) //Stolen from https://stackoverflow.com/questions/4412111/avr-eeprom-read-write
{
	while(EECR & (1<<EEPE));    /* Wait for completion of previous write */
 102:	e1 99       	sbic	0x1c, 1	; 28
 104:	fe cf       	rjmp	.-4      	; 0x102 <_Z12EEPROM_writehh>
	EEARH = 0x00;
 106:	1f ba       	out	0x1f, r1	; 31
	EEARL = uiAddress;
 108:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 10a:	6d bb       	out	0x1d, r22	; 29
	cli();
 10c:	f8 94       	cli
	EECR |= (1<<EEMPE);     /* Write logical one to EEMPE */
 10e:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEPE);      /* Start eeprom write by setting EEPE */
 110:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
 112:	78 94       	sei
 114:	08 95       	ret

00000116 <_Z11EEPROM_readh>:
}
unsigned char EEPROM_read(uint8_t uiAddress) //Stolen from https://stackoverflow.com/questions/4412111/avr-eeprom-read-write
{
	while(EECR & (1<<EEPE)); /* Wait for completion of previous write */
 116:	e1 99       	sbic	0x1c, 1	; 28
 118:	fe cf       	rjmp	.-4      	; 0x116 <_Z11EEPROM_readh>

	EEARH = (uiAddress>>8);  /* Set up address register */
 11a:	1f ba       	out	0x1f, r1	; 31
	EEARL = uiAddress;
 11c:	8e bb       	out	0x1e, r24	; 30

	EECR |= (1<<EERE);       /* Start eeprom read by writing EERE */
 11e:	e0 9a       	sbi	0x1c, 0	; 28

	return EEDR;             /* Return data from Data Register */
 120:	8d b3       	in	r24, 0x1d	; 29
}
 122:	08 95       	ret

00000124 <__vector_2>:


ISR(PCINT0_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	8f e9       	ldi	r24, 0x9F	; 159
 134:	9f e0       	ldi	r25, 0x0F	; 15
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <__vector_2+0x12>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__vector_2+0x18>
 13c:	00 00       	nop
	_delay_ms(1);
	if (((PINB&(1<<BTN_PIN)) == 0x00))
 13e:	b0 99       	sbic	0x16, 0	; 22
 140:	0f c0       	rjmp	.+30     	; 0x160 <__vector_2+0x3c>
	{
		sleep_disable();
 142:	85 b7       	in	r24, 0x35	; 53
 144:	8f 7d       	andi	r24, 0xDF	; 223
 146:	85 bf       	out	0x35, r24	; 53
		mode++;
 148:	80 91 01 01 	lds	r24, 0x0101
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 01 01 	sts	0x0101, r24
		j = 0xFD; //Exit current mode loop
 152:	9d ef       	ldi	r25, 0xFD	; 253
 154:	90 93 00 01 	sts	0x0100, r25
		if (mode >= 9){ //Max mode options - 1
 158:	89 30       	cpi	r24, 0x09	; 9
 15a:	10 f0       	brcs	.+4      	; 0x160 <__vector_2+0x3c>
			mode = 0;
 15c:	10 92 01 01 	sts	0x0101, r1
		}
	}
}
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <main>:

int main()
{
	

	HC595Init();
 16e:	73 df       	rcall	.-282    	; 0x56 <_Z9HC595Initv>
	
	PORTB |= (1<<BTN_PIN); //Btn pull up enable
 170:	c0 9a       	sbi	0x18, 0	; 24
	mode = EEPROM_read(0x07); // Read mode selection from last power cycle
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	d0 df       	rcall	.-96     	; 0x116 <_Z11EEPROM_readh>
 176:	80 93 01 01 	sts	0x0101, r24
	if(mode > 0x09){ //catch any errors in EEPROM
 17a:	8a 30       	cpi	r24, 0x0A	; 10
 17c:	10 f0       	brcs	.+4      	; 0x182 <main+0x14>
		mode = 0x00;
 17e:	10 92 01 01 	sts	0x0101, r1
	}
	
	//PRR = (1<<PRTIM0) | (1<<PRTIM1) | (1<<PRUSI) | (1<<PRADC); //power reduction
	GIMSK |= (1<<PCIE);
 182:	8b b7       	in	r24, 0x3b	; 59
 184:	80 62       	ori	r24, 0x20	; 32
 186:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= (1<<BTN_PIN);
 188:	a8 9a       	sbi	0x15, 0	; 21
	sei();
 18a:	78 94       	sei
				//data_byte = data_byte<<1;
				Wait();
				Wait();
			}
			
			for (j=10;j>0;j--)
 18c:	ca e0       	ldi	r28, 0x0A	; 10
 18e:	df e0       	ldi	r29, 0x0F	; 15
	PCMSK |= (1<<BTN_PIN);
	sei();
		  
	while(1)
	{	
		if (mode == 0)
 190:	e0 91 01 01 	lds	r30, 0x0101
 194:	e1 11       	cpse	r30, r1
 196:	5c c3       	rjmp	.+1720   	; 0x850 <__FUSE_REGION_LENGTH__+0x450>
		{
			for (j=0;j<10;j++)
 198:	10 92 00 01 	sts	0x0100, r1
			{
				write5Bytes(line_pattern1[j],line_pattern1[j]>>8,line_pattern1[j]>>16,line_pattern1[j]>>24,line_pattern1[j]>>32);
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	e0 55       	subi	r30, 0x50	; 80
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	a0 81       	ld	r26, Z
 1b0:	c1 80       	ldd	r12, Z+1	; 0x01
 1b2:	d2 80       	ldd	r13, Z+2	; 0x02
 1b4:	e3 80       	ldd	r14, Z+3	; 0x03
 1b6:	f4 80       	ldd	r15, Z+4	; 0x04
 1b8:	15 81       	ldd	r17, Z+5	; 0x05
 1ba:	b6 81       	ldd	r27, Z+6	; 0x06
 1bc:	e7 81       	ldd	r30, Z+7	; 0x07
 1be:	2a 2f       	mov	r18, r26
 1c0:	3c 2d       	mov	r19, r12
 1c2:	4d 2d       	mov	r20, r13
 1c4:	5e 2d       	mov	r21, r14
 1c6:	6f 2d       	mov	r22, r15
 1c8:	71 2f       	mov	r23, r17
 1ca:	8b 2f       	mov	r24, r27
 1cc:	9e 2f       	mov	r25, r30
 1ce:	00 e2       	ldi	r16, 0x20	; 32
 1d0:	6d d3       	rcall	.+1754   	; 0x8ac <__lshrdi3>
 1d2:	a2 2e       	mov	r10, r18
 1d4:	2a 2f       	mov	r18, r26
 1d6:	3c 2d       	mov	r19, r12
 1d8:	4d 2d       	mov	r20, r13
 1da:	5e 2d       	mov	r21, r14
 1dc:	6f 2d       	mov	r22, r15
 1de:	71 2f       	mov	r23, r17
 1e0:	8b 2f       	mov	r24, r27
 1e2:	9e 2f       	mov	r25, r30
 1e4:	08 e1       	ldi	r16, 0x18	; 24
 1e6:	62 d3       	rcall	.+1732   	; 0x8ac <__lshrdi3>
 1e8:	b2 2e       	mov	r11, r18
 1ea:	2a 2f       	mov	r18, r26
 1ec:	3c 2d       	mov	r19, r12
 1ee:	4d 2d       	mov	r20, r13
 1f0:	5e 2d       	mov	r21, r14
 1f2:	6f 2d       	mov	r22, r15
 1f4:	71 2f       	mov	r23, r17
 1f6:	8b 2f       	mov	r24, r27
 1f8:	9e 2f       	mov	r25, r30
 1fa:	00 e1       	ldi	r16, 0x10	; 16
 1fc:	57 d3       	rcall	.+1710   	; 0x8ac <__lshrdi3>
 1fe:	f2 2f       	mov	r31, r18
 200:	2a 2f       	mov	r18, r26
 202:	3c 2d       	mov	r19, r12
 204:	4d 2d       	mov	r20, r13
 206:	5e 2d       	mov	r21, r14
 208:	6f 2d       	mov	r22, r15
 20a:	71 2f       	mov	r23, r17
 20c:	8b 2f       	mov	r24, r27
 20e:	9e 2f       	mov	r25, r30
 210:	08 e0       	ldi	r16, 0x08	; 8
 212:	4c d3       	rcall	.+1688   	; 0x8ac <__lshrdi3>
 214:	62 2f       	mov	r22, r18
 216:	0a 2d       	mov	r16, r10
 218:	2b 2d       	mov	r18, r11
 21a:	4f 2f       	mov	r20, r31
 21c:	8a 2f       	mov	r24, r26
 21e:	57 df       	rcall	.-338    	; 0xce <_Z11write5Byteshhhhh>
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	82 e5       	ldi	r24, 0x52	; 82
 224:	97 e0       	ldi	r25, 0x07	; 7
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0xb8>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0xc2>
 230:	00 00       	nop
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	82 e5       	ldi	r24, 0x52	; 82
 236:	97 e0       	ldi	r25, 0x07	; 7
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0xca>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0xd4>
 242:	00 00       	nop
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	82 e5       	ldi	r24, 0x52	; 82
 248:	97 e0       	ldi	r25, 0x07	; 7
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0xdc>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0xe6>
 254:	00 00       	nop
		  
	while(1)
	{	
		if (mode == 0)
		{
			for (j=0;j<10;j++)
 256:	e0 91 00 01 	lds	r30, 0x0100
 25a:	ef 5f       	subi	r30, 0xFF	; 255
 25c:	e0 93 00 01 	sts	0x0100, r30
 260:	ea 30       	cpi	r30, 0x0A	; 10
 262:	08 f4       	brcc	.+2      	; 0x266 <__stack+0x7>
 264:	9b cf       	rjmp	.-202    	; 0x19c <main+0x2e>
 266:	f4 c2       	rjmp	.+1512   	; 0x850 <__FUSE_REGION_LENGTH__+0x450>
		}
		if (mode == 1)
		{
			for (j=0;j<10;j++)
			{
				write5Bytes(line_pattern2[j],line_pattern2[j]>>8,line_pattern2[j]>>16,line_pattern2[j]>>24,line_pattern2[j]>>32);
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	ee 0f       	add	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	e0 5a       	subi	r30, 0xA0	; 160
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	a0 81       	ld	r26, Z
 27c:	c1 80       	ldd	r12, Z+1	; 0x01
 27e:	d2 80       	ldd	r13, Z+2	; 0x02
 280:	e3 80       	ldd	r14, Z+3	; 0x03
 282:	f4 80       	ldd	r15, Z+4	; 0x04
 284:	15 81       	ldd	r17, Z+5	; 0x05
 286:	b6 81       	ldd	r27, Z+6	; 0x06
 288:	e7 81       	ldd	r30, Z+7	; 0x07
 28a:	2a 2f       	mov	r18, r26
 28c:	3c 2d       	mov	r19, r12
 28e:	4d 2d       	mov	r20, r13
 290:	5e 2d       	mov	r21, r14
 292:	6f 2d       	mov	r22, r15
 294:	71 2f       	mov	r23, r17
 296:	8b 2f       	mov	r24, r27
 298:	9e 2f       	mov	r25, r30
 29a:	00 e2       	ldi	r16, 0x20	; 32
 29c:	07 d3       	rcall	.+1550   	; 0x8ac <__lshrdi3>
 29e:	a2 2e       	mov	r10, r18
 2a0:	2a 2f       	mov	r18, r26
 2a2:	3c 2d       	mov	r19, r12
 2a4:	4d 2d       	mov	r20, r13
 2a6:	5e 2d       	mov	r21, r14
 2a8:	6f 2d       	mov	r22, r15
 2aa:	71 2f       	mov	r23, r17
 2ac:	8b 2f       	mov	r24, r27
 2ae:	9e 2f       	mov	r25, r30
 2b0:	08 e1       	ldi	r16, 0x18	; 24
 2b2:	fc d2       	rcall	.+1528   	; 0x8ac <__lshrdi3>
 2b4:	b2 2e       	mov	r11, r18
 2b6:	2a 2f       	mov	r18, r26
 2b8:	3c 2d       	mov	r19, r12
 2ba:	4d 2d       	mov	r20, r13
 2bc:	5e 2d       	mov	r21, r14
 2be:	6f 2d       	mov	r22, r15
 2c0:	71 2f       	mov	r23, r17
 2c2:	8b 2f       	mov	r24, r27
 2c4:	9e 2f       	mov	r25, r30
 2c6:	00 e1       	ldi	r16, 0x10	; 16
 2c8:	f1 d2       	rcall	.+1506   	; 0x8ac <__lshrdi3>
 2ca:	f2 2f       	mov	r31, r18
 2cc:	2a 2f       	mov	r18, r26
 2ce:	3c 2d       	mov	r19, r12
 2d0:	4d 2d       	mov	r20, r13
 2d2:	5e 2d       	mov	r21, r14
 2d4:	6f 2d       	mov	r22, r15
 2d6:	71 2f       	mov	r23, r17
 2d8:	8b 2f       	mov	r24, r27
 2da:	9e 2f       	mov	r25, r30
 2dc:	08 e0       	ldi	r16, 0x08	; 8
 2de:	e6 d2       	rcall	.+1484   	; 0x8ac <__lshrdi3>
 2e0:	62 2f       	mov	r22, r18
 2e2:	0a 2d       	mov	r16, r10
 2e4:	2b 2d       	mov	r18, r11
 2e6:	4f 2f       	mov	r20, r31
 2e8:	8a 2f       	mov	r24, r26
 2ea:	f1 de       	rcall	.-542    	; 0xce <_Z11write5Byteshhhhh>
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	82 e5       	ldi	r24, 0x52	; 82
 2f0:	97 e0       	ldi	r25, 0x07	; 7
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <__stack+0x93>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <__stack+0x9d>
 2fc:	00 00       	nop
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	82 e5       	ldi	r24, 0x52	; 82
 302:	97 e0       	ldi	r25, 0x07	; 7
 304:	21 50       	subi	r18, 0x01	; 1
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <__stack+0xa5>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <__stack+0xaf>
 30e:	00 00       	nop
				Wait();				
			}
		}
		if (mode == 1)
		{
			for (j=0;j<10;j++)
 310:	e0 91 00 01 	lds	r30, 0x0100
 314:	ef 5f       	subi	r30, 0xFF	; 255
 316:	e0 93 00 01 	sts	0x0100, r30
 31a:	ea 30       	cpi	r30, 0x0A	; 10
 31c:	08 f4       	brcc	.+2      	; 0x320 <__stack+0xc1>
 31e:	a4 cf       	rjmp	.-184    	; 0x268 <__stack+0x9>
				//data_byte = data_byte<<1;
				Wait();
				Wait();
			}
			
			for (j=10;j>0;j--)
 320:	c0 93 00 01 	sts	0x0100, r28
 324:	ec 2f       	mov	r30, r28
			{
				if (mode == 1) //Check for exit condition
 326:	80 91 01 01 	lds	r24, 0x0101
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	09 f0       	breq	.+2      	; 0x330 <__stack+0xd1>
 32e:	54 c0       	rjmp	.+168    	; 0x3d8 <__stack+0x179>
				{
					write5Bytes(line_pattern2[j-1],line_pattern2[j-1]>>8,line_pattern2[j-1]>>16,line_pattern2[j-1]>>24,line_pattern2[j-1]>>32);
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	ee 0f       	add	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	ee 0f       	add	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	ee 0f       	add	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	e8 5a       	subi	r30, 0xA8	; 168
 340:	ff 4f       	sbci	r31, 0xFF	; 255
 342:	a0 81       	ld	r26, Z
 344:	c1 80       	ldd	r12, Z+1	; 0x01
 346:	d2 80       	ldd	r13, Z+2	; 0x02
 348:	e3 80       	ldd	r14, Z+3	; 0x03
 34a:	f4 80       	ldd	r15, Z+4	; 0x04
 34c:	15 81       	ldd	r17, Z+5	; 0x05
 34e:	b6 81       	ldd	r27, Z+6	; 0x06
 350:	e7 81       	ldd	r30, Z+7	; 0x07
 352:	2a 2f       	mov	r18, r26
 354:	3c 2d       	mov	r19, r12
 356:	4d 2d       	mov	r20, r13
 358:	5e 2d       	mov	r21, r14
 35a:	6f 2d       	mov	r22, r15
 35c:	71 2f       	mov	r23, r17
 35e:	8b 2f       	mov	r24, r27
 360:	9e 2f       	mov	r25, r30
 362:	00 e2       	ldi	r16, 0x20	; 32
 364:	a3 d2       	rcall	.+1350   	; 0x8ac <__lshrdi3>
 366:	a2 2e       	mov	r10, r18
 368:	2a 2f       	mov	r18, r26
 36a:	3c 2d       	mov	r19, r12
 36c:	4d 2d       	mov	r20, r13
 36e:	5e 2d       	mov	r21, r14
 370:	6f 2d       	mov	r22, r15
 372:	71 2f       	mov	r23, r17
 374:	8b 2f       	mov	r24, r27
 376:	9e 2f       	mov	r25, r30
 378:	08 e1       	ldi	r16, 0x18	; 24
 37a:	98 d2       	rcall	.+1328   	; 0x8ac <__lshrdi3>
 37c:	b2 2e       	mov	r11, r18
 37e:	2a 2f       	mov	r18, r26
 380:	3c 2d       	mov	r19, r12
 382:	4d 2d       	mov	r20, r13
 384:	5e 2d       	mov	r21, r14
 386:	6f 2d       	mov	r22, r15
 388:	71 2f       	mov	r23, r17
 38a:	8b 2f       	mov	r24, r27
 38c:	9e 2f       	mov	r25, r30
 38e:	00 e1       	ldi	r16, 0x10	; 16
 390:	8d d2       	rcall	.+1306   	; 0x8ac <__lshrdi3>
 392:	f2 2f       	mov	r31, r18
 394:	2a 2f       	mov	r18, r26
 396:	3c 2d       	mov	r19, r12
 398:	4d 2d       	mov	r20, r13
 39a:	5e 2d       	mov	r21, r14
 39c:	6f 2d       	mov	r22, r15
 39e:	71 2f       	mov	r23, r17
 3a0:	8b 2f       	mov	r24, r27
 3a2:	9e 2f       	mov	r25, r30
 3a4:	08 e0       	ldi	r16, 0x08	; 8
 3a6:	82 d2       	rcall	.+1284   	; 0x8ac <__lshrdi3>
 3a8:	62 2f       	mov	r22, r18
 3aa:	0a 2d       	mov	r16, r10
 3ac:	2b 2d       	mov	r18, r11
 3ae:	4f 2f       	mov	r20, r31
 3b0:	8a 2f       	mov	r24, r26
 3b2:	8d de       	rcall	.-742    	; 0xce <_Z11write5Byteshhhhh>
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	82 e5       	ldi	r24, 0x52	; 82
 3b8:	97 e0       	ldi	r25, 0x07	; 7
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <__stack+0x15b>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <__stack+0x165>
 3c4:	00 00       	nop
 3c6:	2f ef       	ldi	r18, 0xFF	; 255
 3c8:	82 e5       	ldi	r24, 0x52	; 82
 3ca:	97 e0       	ldi	r25, 0x07	; 7
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	80 40       	sbci	r24, 0x00	; 0
 3d0:	90 40       	sbci	r25, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <__stack+0x16d>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <__stack+0x177>
 3d6:	00 00       	nop
				//data_byte = data_byte<<1;
				Wait();
				Wait();
			}
			
			for (j=10;j>0;j--)
 3d8:	e0 91 00 01 	lds	r30, 0x0100
 3dc:	e1 50       	subi	r30, 0x01	; 1
 3de:	e0 93 00 01 	sts	0x0100, r30
 3e2:	e1 11       	cpse	r30, r1
 3e4:	a0 cf       	rjmp	.-192    	; 0x326 <__stack+0xc7>
					Wait();
				}
			}
					
		}
		if (mode == 2)
 3e6:	80 91 01 01 	lds	r24, 0x0101
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <__stack+0x191>
 3ee:	39 c2       	rjmp	.+1138   	; 0x862 <__FUSE_REGION_LENGTH__+0x462>
		{
			uint64_t shiftedNum =0x01;
			for (j=0;j<38;j++)
 3f0:	10 92 00 01 	sts	0x0100, r1
 3f4:	11 e0       	ldi	r17, 0x01	; 1
 3f6:	91 2c       	mov	r9, r1
 3f8:	a1 2c       	mov	r10, r1
 3fa:	d1 2c       	mov	r13, r1
 3fc:	e1 2c       	mov	r14, r1
 3fe:	f1 2c       	mov	r15, r1
 400:	b1 2c       	mov	r11, r1
 402:	c1 2c       	mov	r12, r1
			{
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
 404:	21 2f       	mov	r18, r17
 406:	39 2d       	mov	r19, r9
 408:	4a 2d       	mov	r20, r10
 40a:	5d 2d       	mov	r21, r13
 40c:	6e 2d       	mov	r22, r14
 40e:	7f 2d       	mov	r23, r15
 410:	8b 2d       	mov	r24, r11
 412:	9c 2d       	mov	r25, r12
 414:	00 e2       	ldi	r16, 0x20	; 32
 416:	4a d2       	rcall	.+1172   	; 0x8ac <__lshrdi3>
 418:	a2 2f       	mov	r26, r18
 41a:	21 2f       	mov	r18, r17
 41c:	39 2d       	mov	r19, r9
 41e:	4a 2d       	mov	r20, r10
 420:	5d 2d       	mov	r21, r13
 422:	6e 2d       	mov	r22, r14
 424:	7f 2d       	mov	r23, r15
 426:	8b 2d       	mov	r24, r11
 428:	9c 2d       	mov	r25, r12
 42a:	08 e1       	ldi	r16, 0x18	; 24
 42c:	3f d2       	rcall	.+1150   	; 0x8ac <__lshrdi3>
 42e:	f2 2f       	mov	r31, r18
 430:	21 2f       	mov	r18, r17
 432:	39 2d       	mov	r19, r9
 434:	4a 2d       	mov	r20, r10
 436:	5d 2d       	mov	r21, r13
 438:	6e 2d       	mov	r22, r14
 43a:	7f 2d       	mov	r23, r15
 43c:	8b 2d       	mov	r24, r11
 43e:	9c 2d       	mov	r25, r12
 440:	00 e1       	ldi	r16, 0x10	; 16
 442:	34 d2       	rcall	.+1128   	; 0x8ac <__lshrdi3>
 444:	e2 2f       	mov	r30, r18
 446:	21 2f       	mov	r18, r17
 448:	39 2d       	mov	r19, r9
 44a:	4a 2d       	mov	r20, r10
 44c:	5d 2d       	mov	r21, r13
 44e:	6e 2d       	mov	r22, r14
 450:	7f 2d       	mov	r23, r15
 452:	8b 2d       	mov	r24, r11
 454:	9c 2d       	mov	r25, r12
 456:	08 e0       	ldi	r16, 0x08	; 8
 458:	29 d2       	rcall	.+1106   	; 0x8ac <__lshrdi3>
 45a:	62 2f       	mov	r22, r18
 45c:	0a 2f       	mov	r16, r26
 45e:	2f 2f       	mov	r18, r31
 460:	4e 2f       	mov	r20, r30
 462:	81 2f       	mov	r24, r17
 464:	34 de       	rcall	.-920    	; 0xce <_Z11write5Byteshhhhh>
				shiftedNum = shiftedNum<<1;				   
 466:	21 2f       	mov	r18, r17
 468:	39 2d       	mov	r19, r9
 46a:	4a 2d       	mov	r20, r10
 46c:	5d 2d       	mov	r21, r13
 46e:	6e 2d       	mov	r22, r14
 470:	7f 2d       	mov	r23, r15
 472:	8b 2d       	mov	r24, r11
 474:	9c 2d       	mov	r25, r12
 476:	01 e0       	ldi	r16, 0x01	; 1
 478:	fe d1       	rcall	.+1020   	; 0x876 <__ashldi3>
 47a:	12 2f       	mov	r17, r18
 47c:	93 2e       	mov	r9, r19
 47e:	a4 2e       	mov	r10, r20
 480:	d5 2e       	mov	r13, r21
 482:	e6 2e       	mov	r14, r22
 484:	f7 2e       	mov	r15, r23
 486:	b8 2e       	mov	r11, r24
 488:	c9 2e       	mov	r12, r25
 48a:	2f ef       	ldi	r18, 0xFF	; 255
 48c:	82 e5       	ldi	r24, 0x52	; 82
 48e:	97 e0       	ldi	r25, 0x07	; 7
 490:	21 50       	subi	r18, 0x01	; 1
 492:	80 40       	sbci	r24, 0x00	; 0
 494:	90 40       	sbci	r25, 0x00	; 0
 496:	e1 f7       	brne	.-8      	; 0x490 <__FUSE_REGION_LENGTH__+0x90>
 498:	00 c0       	rjmp	.+0      	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
 49a:	00 00       	nop
					
		}
		if (mode == 2)
		{
			uint64_t shiftedNum =0x01;
			for (j=0;j<38;j++)
 49c:	80 91 00 01 	lds	r24, 0x0100
 4a0:	8f 5f       	subi	r24, 0xFF	; 255
 4a2:	80 93 00 01 	sts	0x0100, r24
 4a6:	86 32       	cpi	r24, 0x26	; 38
 4a8:	08 f4       	brcc	.+2      	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
 4aa:	ac cf       	rjmp	.-168    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
				shiftedNum = shiftedNum<<1;				   
				Wait();										
			}
		}
		if (mode == 3)
 4ac:	80 91 01 01 	lds	r24, 0x0101
 4b0:	83 30       	cpi	r24, 0x03	; 3
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
 4b4:	bb c0       	rjmp	.+374    	; 0x62c <__FUSE_REGION_LENGTH__+0x22c>
		{
			uint64_t shiftedNum =0x00;
			for (j=0;j<39;j++)
 4b6:	10 92 00 01 	sts	0x0100, r1
					
		}
		if (mode == 2)
		{
			uint64_t shiftedNum =0x01;
			for (j=0;j<38;j++)
 4ba:	10 e0       	ldi	r17, 0x00	; 0
 4bc:	f1 2c       	mov	r15, r1
 4be:	e1 2c       	mov	r14, r1
 4c0:	d1 2c       	mov	r13, r1
 4c2:	c1 2c       	mov	r12, r1
 4c4:	b1 2c       	mov	r11, r1
 4c6:	a1 2c       	mov	r10, r1
 4c8:	91 2c       	mov	r9, r1
		if (mode == 3)
		{
			uint64_t shiftedNum =0x00;
			for (j=0;j<39;j++)
			{
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
 4ca:	21 2f       	mov	r18, r17
 4cc:	3f 2d       	mov	r19, r15
 4ce:	4e 2d       	mov	r20, r14
 4d0:	5d 2d       	mov	r21, r13
 4d2:	6c 2d       	mov	r22, r12
 4d4:	7b 2d       	mov	r23, r11
 4d6:	8a 2d       	mov	r24, r10
 4d8:	99 2d       	mov	r25, r9
 4da:	00 e2       	ldi	r16, 0x20	; 32
 4dc:	e7 d1       	rcall	.+974    	; 0x8ac <__lshrdi3>
 4de:	a2 2f       	mov	r26, r18
 4e0:	21 2f       	mov	r18, r17
 4e2:	3f 2d       	mov	r19, r15
 4e4:	4e 2d       	mov	r20, r14
 4e6:	5d 2d       	mov	r21, r13
 4e8:	6c 2d       	mov	r22, r12
 4ea:	7b 2d       	mov	r23, r11
 4ec:	8a 2d       	mov	r24, r10
 4ee:	99 2d       	mov	r25, r9
 4f0:	08 e1       	ldi	r16, 0x18	; 24
 4f2:	dc d1       	rcall	.+952    	; 0x8ac <__lshrdi3>
 4f4:	f2 2f       	mov	r31, r18
 4f6:	21 2f       	mov	r18, r17
 4f8:	3f 2d       	mov	r19, r15
 4fa:	4e 2d       	mov	r20, r14
 4fc:	5d 2d       	mov	r21, r13
 4fe:	6c 2d       	mov	r22, r12
 500:	7b 2d       	mov	r23, r11
 502:	8a 2d       	mov	r24, r10
 504:	99 2d       	mov	r25, r9
 506:	00 e1       	ldi	r16, 0x10	; 16
 508:	d1 d1       	rcall	.+930    	; 0x8ac <__lshrdi3>
 50a:	e2 2f       	mov	r30, r18
 50c:	21 2f       	mov	r18, r17
 50e:	3f 2d       	mov	r19, r15
 510:	4e 2d       	mov	r20, r14
 512:	5d 2d       	mov	r21, r13
 514:	6c 2d       	mov	r22, r12
 516:	7b 2d       	mov	r23, r11
 518:	8a 2d       	mov	r24, r10
 51a:	99 2d       	mov	r25, r9
 51c:	08 e0       	ldi	r16, 0x08	; 8
 51e:	c6 d1       	rcall	.+908    	; 0x8ac <__lshrdi3>
 520:	62 2f       	mov	r22, r18
 522:	0a 2f       	mov	r16, r26
 524:	2f 2f       	mov	r18, r31
 526:	4e 2f       	mov	r20, r30
 528:	81 2f       	mov	r24, r17
 52a:	d1 dd       	rcall	.-1118   	; 0xce <_Z11write5Byteshhhhh>
				shiftedNum = shiftedNum<<1;
 52c:	21 2f       	mov	r18, r17
 52e:	3f 2d       	mov	r19, r15
 530:	4e 2d       	mov	r20, r14
 532:	5d 2d       	mov	r21, r13
 534:	6c 2d       	mov	r22, r12
 536:	7b 2d       	mov	r23, r11
 538:	8a 2d       	mov	r24, r10
 53a:	99 2d       	mov	r25, r9
 53c:	01 e0       	ldi	r16, 0x01	; 1
 53e:	9b d1       	rcall	.+822    	; 0x876 <__ashldi3>
				shiftedNum = shiftedNum + 1;				   
 540:	a1 e0       	ldi	r26, 0x01	; 1
 542:	d0 d1       	rcall	.+928    	; 0x8e4 <__adddi3_s8>
 544:	12 2f       	mov	r17, r18
 546:	f3 2e       	mov	r15, r19
 548:	e4 2e       	mov	r14, r20
 54a:	d5 2e       	mov	r13, r21
 54c:	c6 2e       	mov	r12, r22
 54e:	b7 2e       	mov	r11, r23
 550:	a8 2e       	mov	r10, r24
 552:	99 2e       	mov	r9, r25
 554:	2f ef       	ldi	r18, 0xFF	; 255
 556:	82 e5       	ldi	r24, 0x52	; 82
 558:	97 e0       	ldi	r25, 0x07	; 7
 55a:	21 50       	subi	r18, 0x01	; 1
 55c:	80 40       	sbci	r24, 0x00	; 0
 55e:	90 40       	sbci	r25, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <__FUSE_REGION_LENGTH__+0x15a>
 562:	00 c0       	rjmp	.+0      	; 0x564 <__FUSE_REGION_LENGTH__+0x164>
 564:	00 00       	nop
			}
		}
		if (mode == 3)
		{
			uint64_t shiftedNum =0x00;
			for (j=0;j<39;j++)
 566:	80 91 00 01 	lds	r24, 0x0100
 56a:	8f 5f       	subi	r24, 0xFF	; 255
 56c:	80 93 00 01 	sts	0x0100, r24
 570:	87 32       	cpi	r24, 0x27	; 39
 572:	08 f4       	brcc	.+2      	; 0x576 <__FUSE_REGION_LENGTH__+0x176>
 574:	aa cf       	rjmp	.-172    	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
				shiftedNum = shiftedNum<<1;
				shiftedNum = shiftedNum + 1;				   
				Wait();										
			}
			if (mode == 3)//check for exit condition
 576:	80 91 01 01 	lds	r24, 0x0101
 57a:	83 30       	cpi	r24, 0x03	; 3
 57c:	09 f0       	breq	.+2      	; 0x580 <__FUSE_REGION_LENGTH__+0x180>
 57e:	56 c0       	rjmp	.+172    	; 0x62c <__FUSE_REGION_LENGTH__+0x22c>
			{
				for (j=0;j<39;j++)
 580:	10 92 00 01 	sts	0x0100, r1
				{
					write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
 584:	21 2f       	mov	r18, r17
 586:	3f 2d       	mov	r19, r15
 588:	4e 2d       	mov	r20, r14
 58a:	5d 2d       	mov	r21, r13
 58c:	6c 2d       	mov	r22, r12
 58e:	7b 2d       	mov	r23, r11
 590:	8a 2d       	mov	r24, r10
 592:	99 2d       	mov	r25, r9
 594:	00 e2       	ldi	r16, 0x20	; 32
 596:	8a d1       	rcall	.+788    	; 0x8ac <__lshrdi3>
 598:	a2 2f       	mov	r26, r18
 59a:	21 2f       	mov	r18, r17
 59c:	3f 2d       	mov	r19, r15
 59e:	4e 2d       	mov	r20, r14
 5a0:	5d 2d       	mov	r21, r13
 5a2:	6c 2d       	mov	r22, r12
 5a4:	7b 2d       	mov	r23, r11
 5a6:	8a 2d       	mov	r24, r10
 5a8:	99 2d       	mov	r25, r9
 5aa:	08 e1       	ldi	r16, 0x18	; 24
 5ac:	7f d1       	rcall	.+766    	; 0x8ac <__lshrdi3>
 5ae:	f2 2f       	mov	r31, r18
 5b0:	21 2f       	mov	r18, r17
 5b2:	3f 2d       	mov	r19, r15
 5b4:	4e 2d       	mov	r20, r14
 5b6:	5d 2d       	mov	r21, r13
 5b8:	6c 2d       	mov	r22, r12
 5ba:	7b 2d       	mov	r23, r11
 5bc:	8a 2d       	mov	r24, r10
 5be:	99 2d       	mov	r25, r9
 5c0:	00 e1       	ldi	r16, 0x10	; 16
 5c2:	74 d1       	rcall	.+744    	; 0x8ac <__lshrdi3>
 5c4:	e2 2f       	mov	r30, r18
 5c6:	21 2f       	mov	r18, r17
 5c8:	3f 2d       	mov	r19, r15
 5ca:	4e 2d       	mov	r20, r14
 5cc:	5d 2d       	mov	r21, r13
 5ce:	6c 2d       	mov	r22, r12
 5d0:	7b 2d       	mov	r23, r11
 5d2:	8a 2d       	mov	r24, r10
 5d4:	99 2d       	mov	r25, r9
 5d6:	08 e0       	ldi	r16, 0x08	; 8
 5d8:	69 d1       	rcall	.+722    	; 0x8ac <__lshrdi3>
 5da:	62 2f       	mov	r22, r18
 5dc:	0a 2f       	mov	r16, r26
 5de:	2f 2f       	mov	r18, r31
 5e0:	4e 2f       	mov	r20, r30
 5e2:	81 2f       	mov	r24, r17
 5e4:	74 dd       	rcall	.-1304   	; 0xce <_Z11write5Byteshhhhh>
					shiftedNum = shiftedNum<<1;
 5e6:	21 2f       	mov	r18, r17
 5e8:	3f 2d       	mov	r19, r15
 5ea:	4e 2d       	mov	r20, r14
 5ec:	5d 2d       	mov	r21, r13
 5ee:	6c 2d       	mov	r22, r12
 5f0:	7b 2d       	mov	r23, r11
 5f2:	8a 2d       	mov	r24, r10
 5f4:	99 2d       	mov	r25, r9
 5f6:	01 e0       	ldi	r16, 0x01	; 1
 5f8:	3e d1       	rcall	.+636    	; 0x876 <__ashldi3>
 5fa:	12 2f       	mov	r17, r18
 5fc:	f3 2e       	mov	r15, r19
 5fe:	e4 2e       	mov	r14, r20
 600:	d5 2e       	mov	r13, r21
 602:	c6 2e       	mov	r12, r22
 604:	b7 2e       	mov	r11, r23
 606:	a8 2e       	mov	r10, r24
 608:	99 2e       	mov	r9, r25
 60a:	2f ef       	ldi	r18, 0xFF	; 255
 60c:	82 e5       	ldi	r24, 0x52	; 82
 60e:	97 e0       	ldi	r25, 0x07	; 7
 610:	21 50       	subi	r18, 0x01	; 1
 612:	80 40       	sbci	r24, 0x00	; 0
 614:	90 40       	sbci	r25, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <__FUSE_REGION_LENGTH__+0x210>
 618:	00 c0       	rjmp	.+0      	; 0x61a <__FUSE_REGION_LENGTH__+0x21a>
 61a:	00 00       	nop
				shiftedNum = shiftedNum + 1;				   
				Wait();										
			}
			if (mode == 3)//check for exit condition
			{
				for (j=0;j<39;j++)
 61c:	80 91 00 01 	lds	r24, 0x0100
 620:	8f 5f       	subi	r24, 0xFF	; 255
 622:	80 93 00 01 	sts	0x0100, r24
 626:	87 32       	cpi	r24, 0x27	; 39
 628:	08 f4       	brcc	.+2      	; 0x62c <__FUSE_REGION_LENGTH__+0x22c>
 62a:	ac cf       	rjmp	.-168    	; 0x584 <__FUSE_REGION_LENGTH__+0x184>
					shiftedNum = shiftedNum<<1;
					Wait();
				}
			}			
		}
		if (mode == 4)
 62c:	80 91 01 01 	lds	r24, 0x0101
 630:	84 30       	cpi	r24, 0x04	; 4
 632:	09 f0       	breq	.+2      	; 0x636 <__FUSE_REGION_LENGTH__+0x236>
 634:	1a c1       	rjmp	.+564    	; 0x86a <__FUSE_REGION_LENGTH__+0x46a>
 636:	fd 2e       	mov	r15, r29
 638:	b1 2c       	mov	r11, r1
 63a:	c1 2c       	mov	r12, r1
 63c:	d1 2c       	mov	r13, r1
 63e:	10 e0       	ldi	r17, 0x00	; 0
 640:	e1 2c       	mov	r14, r1
 642:	91 2c       	mov	r9, r1
 644:	a1 2c       	mov	r10, r1
		{
			uint64_t shiftedNum =0x0F;
			while (mode == 4)
			{
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
 646:	2f 2d       	mov	r18, r15
 648:	3b 2d       	mov	r19, r11
 64a:	4c 2d       	mov	r20, r12
 64c:	5d 2d       	mov	r21, r13
 64e:	61 2f       	mov	r22, r17
 650:	7e 2d       	mov	r23, r14
 652:	89 2d       	mov	r24, r9
 654:	9a 2d       	mov	r25, r10
 656:	00 e2       	ldi	r16, 0x20	; 32
 658:	29 d1       	rcall	.+594    	; 0x8ac <__lshrdi3>
 65a:	a2 2f       	mov	r26, r18
 65c:	2f 2d       	mov	r18, r15
 65e:	3b 2d       	mov	r19, r11
 660:	4c 2d       	mov	r20, r12
 662:	5d 2d       	mov	r21, r13
 664:	61 2f       	mov	r22, r17
 666:	7e 2d       	mov	r23, r14
 668:	89 2d       	mov	r24, r9
 66a:	9a 2d       	mov	r25, r10
 66c:	08 e1       	ldi	r16, 0x18	; 24
 66e:	1e d1       	rcall	.+572    	; 0x8ac <__lshrdi3>
 670:	f2 2f       	mov	r31, r18
 672:	2f 2d       	mov	r18, r15
 674:	3b 2d       	mov	r19, r11
 676:	4c 2d       	mov	r20, r12
 678:	5d 2d       	mov	r21, r13
 67a:	61 2f       	mov	r22, r17
 67c:	7e 2d       	mov	r23, r14
 67e:	89 2d       	mov	r24, r9
 680:	9a 2d       	mov	r25, r10
 682:	00 e1       	ldi	r16, 0x10	; 16
 684:	13 d1       	rcall	.+550    	; 0x8ac <__lshrdi3>
 686:	e2 2f       	mov	r30, r18
 688:	2f 2d       	mov	r18, r15
 68a:	3b 2d       	mov	r19, r11
 68c:	4c 2d       	mov	r20, r12
 68e:	5d 2d       	mov	r21, r13
 690:	61 2f       	mov	r22, r17
 692:	7e 2d       	mov	r23, r14
 694:	89 2d       	mov	r24, r9
 696:	9a 2d       	mov	r25, r10
 698:	08 e0       	ldi	r16, 0x08	; 8
 69a:	08 d1       	rcall	.+528    	; 0x8ac <__lshrdi3>
 69c:	62 2f       	mov	r22, r18
 69e:	0a 2f       	mov	r16, r26
 6a0:	2f 2f       	mov	r18, r31
 6a2:	4e 2f       	mov	r20, r30
 6a4:	8f 2d       	mov	r24, r15
 6a6:	13 dd       	rcall	.-1498   	; 0xce <_Z11write5Byteshhhhh>
				if ((shiftedNum & 0x002000000000) == 0x002000000000) //Bit at end
 6a8:	20 e0       	ldi	r18, 0x00	; 0
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	40 e0       	ldi	r20, 0x00	; 0
 6ae:	50 e0       	ldi	r21, 0x00	; 0
 6b0:	61 2f       	mov	r22, r17
 6b2:	60 72       	andi	r22, 0x20	; 32
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	a0 e0       	ldi	r26, 0x00	; 0
 6bc:	1f d1       	rcall	.+574    	; 0x8fc <__cmpdi2_s8>
 6be:	a9 f0       	breq	.+42     	; 0x6ea <__FUSE_REGION_LENGTH__+0x2ea>
				{
					shiftedNum = shiftedNum<<1;
 6c0:	2f 2d       	mov	r18, r15
 6c2:	3b 2d       	mov	r19, r11
 6c4:	4c 2d       	mov	r20, r12
 6c6:	5d 2d       	mov	r21, r13
 6c8:	61 2f       	mov	r22, r17
 6ca:	7e 2d       	mov	r23, r14
 6cc:	89 2d       	mov	r24, r9
 6ce:	9a 2d       	mov	r25, r10
 6d0:	01 e0       	ldi	r16, 0x01	; 1
 6d2:	d1 d0       	rcall	.+418    	; 0x876 <__ashldi3>
					shiftedNum = shiftedNum + 1;
 6d4:	a1 e0       	ldi	r26, 0x01	; 1
 6d6:	06 d1       	rcall	.+524    	; 0x8e4 <__adddi3_s8>
 6d8:	f2 2e       	mov	r15, r18
 6da:	b3 2e       	mov	r11, r19
 6dc:	c4 2e       	mov	r12, r20
 6de:	d5 2e       	mov	r13, r21
 6e0:	16 2f       	mov	r17, r22
 6e2:	e7 2e       	mov	r14, r23
 6e4:	98 2e       	mov	r9, r24
 6e6:	a9 2e       	mov	r10, r25
 6e8:	12 c0       	rjmp	.+36     	; 0x70e <__FUSE_REGION_LENGTH__+0x30e>
				} 
				else
				{
					shiftedNum = shiftedNum<<1;
 6ea:	2f 2d       	mov	r18, r15
 6ec:	3b 2d       	mov	r19, r11
 6ee:	4c 2d       	mov	r20, r12
 6f0:	5d 2d       	mov	r21, r13
 6f2:	61 2f       	mov	r22, r17
 6f4:	7e 2d       	mov	r23, r14
 6f6:	89 2d       	mov	r24, r9
 6f8:	9a 2d       	mov	r25, r10
 6fa:	01 e0       	ldi	r16, 0x01	; 1
 6fc:	bc d0       	rcall	.+376    	; 0x876 <__ashldi3>
 6fe:	f2 2e       	mov	r15, r18
 700:	b3 2e       	mov	r11, r19
 702:	c4 2e       	mov	r12, r20
 704:	d5 2e       	mov	r13, r21
 706:	16 2f       	mov	r17, r22
 708:	e7 2e       	mov	r14, r23
 70a:	98 2e       	mov	r9, r24
 70c:	a9 2e       	mov	r10, r25
 70e:	2f ef       	ldi	r18, 0xFF	; 255
 710:	82 e5       	ldi	r24, 0x52	; 82
 712:	97 e0       	ldi	r25, 0x07	; 7
 714:	21 50       	subi	r18, 0x01	; 1
 716:	80 40       	sbci	r24, 0x00	; 0
 718:	90 40       	sbci	r25, 0x00	; 0
 71a:	e1 f7       	brne	.-8      	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
 71c:	00 c0       	rjmp	.+0      	; 0x71e <__FUSE_REGION_LENGTH__+0x31e>
 71e:	00 00       	nop
			}			
		}
		if (mode == 4)
		{
			uint64_t shiftedNum =0x0F;
			while (mode == 4)
 720:	80 91 01 01 	lds	r24, 0x0101
 724:	84 30       	cpi	r24, 0x04	; 4
 726:	09 f4       	brne	.+2      	; 0x72a <__FUSE_REGION_LENGTH__+0x32a>
 728:	8e cf       	rjmp	.-228    	; 0x646 <__FUSE_REGION_LENGTH__+0x246>
				}
				
				Wait();
			}
		}
		if (mode == 5)
 72a:	85 30       	cpi	r24, 0x05	; 5
 72c:	09 f0       	breq	.+2      	; 0x730 <__FUSE_REGION_LENGTH__+0x330>
 72e:	54 c0       	rjmp	.+168    	; 0x7d8 <__FUSE_REGION_LENGTH__+0x3d8>
 730:	10 e0       	ldi	r17, 0x00	; 0
 732:	91 2c       	mov	r9, r1
 734:	c1 2c       	mov	r12, r1
 736:	d1 2c       	mov	r13, r1
 738:	e1 2c       	mov	r14, r1
 73a:	f1 2c       	mov	r15, r1
 73c:	a1 2c       	mov	r10, r1
 73e:	b1 2c       	mov	r11, r1
		{
			uint64_t shiftedNum =0x00;
			for (shiftedNum=0;mode == 5;shiftedNum++)
			{
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
 740:	21 2f       	mov	r18, r17
 742:	39 2d       	mov	r19, r9
 744:	4c 2d       	mov	r20, r12
 746:	5d 2d       	mov	r21, r13
 748:	6e 2d       	mov	r22, r14
 74a:	7f 2d       	mov	r23, r15
 74c:	8a 2d       	mov	r24, r10
 74e:	9b 2d       	mov	r25, r11
 750:	00 e2       	ldi	r16, 0x20	; 32
 752:	ac d0       	rcall	.+344    	; 0x8ac <__lshrdi3>
 754:	a2 2f       	mov	r26, r18
 756:	21 2f       	mov	r18, r17
 758:	39 2d       	mov	r19, r9
 75a:	4c 2d       	mov	r20, r12
 75c:	5d 2d       	mov	r21, r13
 75e:	6e 2d       	mov	r22, r14
 760:	7f 2d       	mov	r23, r15
 762:	8a 2d       	mov	r24, r10
 764:	9b 2d       	mov	r25, r11
 766:	08 e1       	ldi	r16, 0x18	; 24
 768:	a1 d0       	rcall	.+322    	; 0x8ac <__lshrdi3>
 76a:	f2 2f       	mov	r31, r18
 76c:	21 2f       	mov	r18, r17
 76e:	39 2d       	mov	r19, r9
 770:	4c 2d       	mov	r20, r12
 772:	5d 2d       	mov	r21, r13
 774:	6e 2d       	mov	r22, r14
 776:	7f 2d       	mov	r23, r15
 778:	8a 2d       	mov	r24, r10
 77a:	9b 2d       	mov	r25, r11
 77c:	00 e1       	ldi	r16, 0x10	; 16
 77e:	96 d0       	rcall	.+300    	; 0x8ac <__lshrdi3>
 780:	e2 2f       	mov	r30, r18
 782:	21 2f       	mov	r18, r17
 784:	39 2d       	mov	r19, r9
 786:	4c 2d       	mov	r20, r12
 788:	5d 2d       	mov	r21, r13
 78a:	6e 2d       	mov	r22, r14
 78c:	7f 2d       	mov	r23, r15
 78e:	8a 2d       	mov	r24, r10
 790:	9b 2d       	mov	r25, r11
 792:	08 e0       	ldi	r16, 0x08	; 8
 794:	8b d0       	rcall	.+278    	; 0x8ac <__lshrdi3>
 796:	62 2f       	mov	r22, r18
 798:	0a 2f       	mov	r16, r26
 79a:	2f 2f       	mov	r18, r31
 79c:	4e 2f       	mov	r20, r30
 79e:	81 2f       	mov	r24, r17
 7a0:	96 dc       	rcall	.-1748   	; 0xce <_Z11write5Byteshhhhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7a2:	25 e3       	ldi	r18, 0x35	; 53
 7a4:	2a 95       	dec	r18
 7a6:	f1 f7       	brne	.-4      	; 0x7a4 <__FUSE_REGION_LENGTH__+0x3a4>
 7a8:	00 00       	nop
			}
		}
		if (mode == 5)
		{
			uint64_t shiftedNum =0x00;
			for (shiftedNum=0;mode == 5;shiftedNum++)
 7aa:	21 2f       	mov	r18, r17
 7ac:	39 2d       	mov	r19, r9
 7ae:	4c 2d       	mov	r20, r12
 7b0:	5d 2d       	mov	r21, r13
 7b2:	6e 2d       	mov	r22, r14
 7b4:	7f 2d       	mov	r23, r15
 7b6:	8a 2d       	mov	r24, r10
 7b8:	9b 2d       	mov	r25, r11
 7ba:	a1 e0       	ldi	r26, 0x01	; 1
 7bc:	93 d0       	rcall	.+294    	; 0x8e4 <__adddi3_s8>
 7be:	12 2f       	mov	r17, r18
 7c0:	93 2e       	mov	r9, r19
 7c2:	c4 2e       	mov	r12, r20
 7c4:	d5 2e       	mov	r13, r21
 7c6:	e6 2e       	mov	r14, r22
 7c8:	f7 2e       	mov	r15, r23
 7ca:	a8 2e       	mov	r10, r24
 7cc:	b9 2e       	mov	r11, r25
 7ce:	80 91 01 01 	lds	r24, 0x0101
 7d2:	85 30       	cpi	r24, 0x05	; 5
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <__FUSE_REGION_LENGTH__+0x3d8>
 7d6:	b4 cf       	rjmp	.-152    	; 0x740 <__FUSE_REGION_LENGTH__+0x340>
			{
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
				Wait2();
			}
		}
		if (mode == 6)
 7d8:	80 91 01 01 	lds	r24, 0x0101
 7dc:	86 30       	cpi	r24, 0x06	; 6
 7de:	79 f4       	brne	.+30     	; 0x7fe <__FUSE_REGION_LENGTH__+0x3fe>
		{
			write5Bytes(0xFF,0xFF,0xFF,0xFF,0xFF);
 7e0:	0f ef       	ldi	r16, 0xFF	; 255
 7e2:	2f ef       	ldi	r18, 0xFF	; 255
 7e4:	4f ef       	ldi	r20, 0xFF	; 255
 7e6:	6f ef       	ldi	r22, 0xFF	; 255
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
 7ea:	71 dc       	rcall	.-1822   	; 0xce <_Z11write5Byteshhhhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7ec:	8f ef       	ldi	r24, 0xFF	; 255
 7ee:	93 ed       	ldi	r25, 0xD3	; 211
 7f0:	20 e3       	ldi	r18, 0x30	; 48
 7f2:	81 50       	subi	r24, 0x01	; 1
 7f4:	90 40       	sbci	r25, 0x00	; 0
 7f6:	20 40       	sbci	r18, 0x00	; 0
 7f8:	e1 f7       	brne	.-8      	; 0x7f2 <__FUSE_REGION_LENGTH__+0x3f2>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <__FUSE_REGION_LENGTH__+0x3fc>
 7fc:	00 00       	nop
			_delay_ms(1000);
		}
		if (mode == 7)
 7fe:	80 91 01 01 	lds	r24, 0x0101
 802:	87 30       	cpi	r24, 0x07	; 7
 804:	61 f4       	brne	.+24     	; 0x81e <__FUSE_REGION_LENGTH__+0x41e>
		{
			mode = 0; //skip this mode
 806:	10 92 01 01 	sts	0x0101, r1
			write5Bytes(0,0,0,0,0);
 80a:	00 e0       	ldi	r16, 0x00	; 0
 80c:	20 e0       	ldi	r18, 0x00	; 0
 80e:	40 e0       	ldi	r20, 0x00	; 0
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	5c dc       	rcall	.-1864   	; 0xce <_Z11write5Byteshhhhh>
			sleep_enable();
 816:	85 b7       	in	r24, 0x35	; 53
 818:	80 62       	ori	r24, 0x20	; 32
 81a:	85 bf       	out	0x35, r24	; 53
			sleep_cpu();
 81c:	88 95       	sleep
						
		}
		if (mode == 8)
 81e:	80 91 01 01 	lds	r24, 0x0101
 822:	88 30       	cpi	r24, 0x08	; 8
 824:	09 f0       	breq	.+2      	; 0x828 <__FUSE_REGION_LENGTH__+0x428>
 826:	b4 cc       	rjmp	.-1688   	; 0x190 <main+0x22>
		{
			//This mode is also skipped
			write5Bytes(0xFF,0xFF,0xFF,0xFF,0xFF);
 828:	0f ef       	ldi	r16, 0xFF	; 255
 82a:	2f ef       	ldi	r18, 0xFF	; 255
 82c:	4f ef       	ldi	r20, 0xFF	; 255
 82e:	6f ef       	ldi	r22, 0xFF	; 255
 830:	8f ef       	ldi	r24, 0xFF	; 255
 832:	4d dc       	rcall	.-1894   	; 0xce <_Z11write5Byteshhhhh>
 834:	8f ef       	ldi	r24, 0xFF	; 255
 836:	93 ed       	ldi	r25, 0xD3	; 211
 838:	20 e3       	ldi	r18, 0x30	; 48
 83a:	81 50       	subi	r24, 0x01	; 1
 83c:	90 40       	sbci	r25, 0x00	; 0
 83e:	20 40       	sbci	r18, 0x00	; 0
 840:	e1 f7       	brne	.-8      	; 0x83a <__FUSE_REGION_LENGTH__+0x43a>
 842:	00 c0       	rjmp	.+0      	; 0x844 <__FUSE_REGION_LENGTH__+0x444>
 844:	00 00       	nop
 846:	a4 cc       	rjmp	.-1720   	; 0x190 <main+0x22>
				Wait();				
			}
		}
		if (mode == 1)
		{
			for (j=0;j<10;j++)
 848:	10 92 00 01 	sts	0x0100, r1
 84c:	e0 e0       	ldi	r30, 0x00	; 0
 84e:	0c cd       	rjmp	.-1512   	; 0x268 <__stack+0x9>
				Wait();   	
				Wait();	 
				Wait();				
			}
		}
		if (mode == 1)
 850:	80 91 01 01 	lds	r24, 0x0101
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	09 f0       	breq	.+2      	; 0x85a <__FUSE_REGION_LENGTH__+0x45a>
 858:	c6 cd       	rjmp	.-1140   	; 0x3e6 <__stack+0x187>
 85a:	f6 cf       	rjmp	.-20     	; 0x848 <__FUSE_REGION_LENGTH__+0x448>
			}
		}
		if (mode == 3)
		{
			uint64_t shiftedNum =0x00;
			for (j=0;j<39;j++)
 85c:	10 92 00 01 	sts	0x0100, r1
 860:	2c ce       	rjmp	.-936    	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
				shiftedNum = shiftedNum<<1;				   
				Wait();										
			}
		}
		if (mode == 3)
 862:	83 30       	cpi	r24, 0x03	; 3
 864:	09 f0       	breq	.+2      	; 0x868 <__FUSE_REGION_LENGTH__+0x468>
 866:	e2 ce       	rjmp	.-572    	; 0x62c <__FUSE_REGION_LENGTH__+0x22c>
 868:	f9 cf       	rjmp	.-14     	; 0x85c <__FUSE_REGION_LENGTH__+0x45c>
				}
				
				Wait();
			}
		}
		if (mode == 5)
 86a:	80 91 01 01 	lds	r24, 0x0101
 86e:	85 30       	cpi	r24, 0x05	; 5
 870:	09 f0       	breq	.+2      	; 0x874 <__FUSE_REGION_LENGTH__+0x474>
 872:	b2 cf       	rjmp	.-156    	; 0x7d8 <__FUSE_REGION_LENGTH__+0x3d8>
 874:	5d cf       	rjmp	.-326    	; 0x730 <__FUSE_REGION_LENGTH__+0x330>

00000876 <__ashldi3>:
 876:	0f 93       	push	r16
 878:	08 30       	cpi	r16, 0x08	; 8
 87a:	90 f0       	brcs	.+36     	; 0x8a0 <__ashldi3+0x2a>
 87c:	98 2f       	mov	r25, r24
 87e:	87 2f       	mov	r24, r23
 880:	76 2f       	mov	r23, r22
 882:	65 2f       	mov	r22, r21
 884:	54 2f       	mov	r21, r20
 886:	43 2f       	mov	r20, r19
 888:	32 2f       	mov	r19, r18
 88a:	22 27       	eor	r18, r18
 88c:	08 50       	subi	r16, 0x08	; 8
 88e:	f4 cf       	rjmp	.-24     	; 0x878 <__ashldi3+0x2>
 890:	22 0f       	add	r18, r18
 892:	33 1f       	adc	r19, r19
 894:	44 1f       	adc	r20, r20
 896:	55 1f       	adc	r21, r21
 898:	66 1f       	adc	r22, r22
 89a:	77 1f       	adc	r23, r23
 89c:	88 1f       	adc	r24, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	0a 95       	dec	r16
 8a2:	b2 f7       	brpl	.-20     	; 0x890 <__ashldi3+0x1a>
 8a4:	0f 91       	pop	r16
 8a6:	08 95       	ret

000008a8 <__ashrdi3>:
 8a8:	97 fb       	bst	r25, 7
 8aa:	10 f8       	bld	r1, 0

000008ac <__lshrdi3>:
 8ac:	16 94       	lsr	r1
 8ae:	00 08       	sbc	r0, r0
 8b0:	0f 93       	push	r16
 8b2:	08 30       	cpi	r16, 0x08	; 8
 8b4:	98 f0       	brcs	.+38     	; 0x8dc <__lshrdi3+0x30>
 8b6:	08 50       	subi	r16, 0x08	; 8
 8b8:	23 2f       	mov	r18, r19
 8ba:	34 2f       	mov	r19, r20
 8bc:	45 2f       	mov	r20, r21
 8be:	56 2f       	mov	r21, r22
 8c0:	67 2f       	mov	r22, r23
 8c2:	78 2f       	mov	r23, r24
 8c4:	89 2f       	mov	r24, r25
 8c6:	90 2d       	mov	r25, r0
 8c8:	f4 cf       	rjmp	.-24     	; 0x8b2 <__lshrdi3+0x6>
 8ca:	05 94       	asr	r0
 8cc:	97 95       	ror	r25
 8ce:	87 95       	ror	r24
 8d0:	77 95       	ror	r23
 8d2:	67 95       	ror	r22
 8d4:	57 95       	ror	r21
 8d6:	47 95       	ror	r20
 8d8:	37 95       	ror	r19
 8da:	27 95       	ror	r18
 8dc:	0a 95       	dec	r16
 8de:	aa f7       	brpl	.-22     	; 0x8ca <__lshrdi3+0x1e>
 8e0:	0f 91       	pop	r16
 8e2:	08 95       	ret

000008e4 <__adddi3_s8>:
 8e4:	00 24       	eor	r0, r0
 8e6:	a7 fd       	sbrc	r26, 7
 8e8:	00 94       	com	r0
 8ea:	2a 0f       	add	r18, r26
 8ec:	30 1d       	adc	r19, r0
 8ee:	40 1d       	adc	r20, r0
 8f0:	50 1d       	adc	r21, r0
 8f2:	60 1d       	adc	r22, r0
 8f4:	70 1d       	adc	r23, r0
 8f6:	80 1d       	adc	r24, r0
 8f8:	90 1d       	adc	r25, r0
 8fa:	08 95       	ret

000008fc <__cmpdi2_s8>:
 8fc:	00 24       	eor	r0, r0
 8fe:	a7 fd       	sbrc	r26, 7
 900:	00 94       	com	r0
 902:	2a 17       	cp	r18, r26
 904:	30 05       	cpc	r19, r0
 906:	40 05       	cpc	r20, r0
 908:	50 05       	cpc	r21, r0
 90a:	60 05       	cpc	r22, r0
 90c:	70 05       	cpc	r23, r0
 90e:	80 05       	cpc	r24, r0
 910:	90 05       	cpc	r25, r0
 912:	08 95       	ret

00000914 <_exit>:
 914:	f8 94       	cli

00000916 <__stop_program>:
 916:	ff cf       	rjmp	.-2      	; 0x916 <__stop_program>
